<html>

<head>
    <link rel="stylesheet" href="estellestyles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/scrollama"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>
    <script src="scroll.js"></script>
    <title>Fishy Business</title>
    <div class="progressBar">
        <!-- 8 sections so 8 rectangles? -->
        <svg id="rectangles">
            <rect id="progress" width="0" height="10" style="fill:#2942a5;" />
        </svg>
        <!-- <svg id = "rectangles">
            <rect width="12.5%" height="10" style="fill:#2942a5;" />
        </svg>
        <svg id = "rectangles">
            <rect width="12.5%" height="10" style="fill:#2942a5;" />
        </svg> -->
    </div>
</head>

<body>

    <section id="scrollViz">
        <div id="graphic">
            <div id="vis">
                <!-- <div class="alignVertical"> -->
                <div class="menu fancyFont alignVertical">
                    <h2>Catch of the Day</h2>


                    <!-- Salmon Order -->
                    <div class="order alignVertical">
                        <text id=salmon class="menuTitle hover-underline-animation fadeAnimation">Miso
                            Salmon | $31</text>
                        <p>Served with bok choy, ginger rice, and microgreens.</p>
                    </div>
                    <!-- Shrimp Order -->
                    <div class="order alignVertical">
                        <text id=shrimp class="menuTitle hover-underline-animation fadeAnimation">Spicy
                            Cajun Shrimp | $27</text>
                        <p>Served with cheesy grits and a big spoon.</p>

                    </div>
                    <!-- Tilapia Order -->
                    <div class="order alignVertical">
                        <text id=tilapia class="menuTitle hover-underline-animation fadeAnimation">Fried
                            Tilapia Sandwich | $23</text>
                        <p>Served with coleslaw, pickles, tartar sauce, and a side of fries.</p>
                    </div>
                    <!-- </div> -->
                </div>

                <div class="receipt hiddenRemove">
                    <h2 class="textCenter fancyFont">Fishy Business</h2>
                    <h3 class="textCenter fancyFont">fishy-business.onrender.com</h3>
                    <hr class="dashed-line">
                    <table>
                        <col width="70%">
                        <col width="30%">
                        <tr>
                            <th id="dishName"></th>
                            <th id="dishPrice"></th>
                        </tr>
                        <tr>
                            <th id="water"></th>
                            <th id="waterPrice"></th>
                        </tr>
                        <tr>
                            <th id="land"></th>
                            <th id="landPrice"></th>
                        </tr>
                        <tr>
                            <th id="nitrogen"></th>
                            <th id="nitrogenPrice"></th>
                        </tr>
                        <tr>
                            <th id="phos"></th>
                            <th id="phosPrice"></th>
                        </tr>
                    </table>
                    <hr class="dashed-line">
                </div>

                <div class="map hiddenRemove">
                    <svg id="choropleth" height="600" width="800"
                        style="background: white; border: 1px solid gray"></svg>
                </div>


                <div class="lineGraph hiddenRemove">
                    <h3 id="lineGraphTitle" class="textCenter">Capture Fisheries vs. Aquaculture Production (1960-2018)
                        in Metric Tons</h3>
                    <div class="buttons"> </div>

                    <svg id="graph" height="500" width="800"
                        style="background: white; margin-top:0px; border: 1px solid gray"></svg>
                </div>
            </div>

            <div id="sections">

                <section id="menu" class="step">
                    <div>
                        <header id=heading class="fancyFont">
                            <h1>Fishy Business</h1>
                            <h2>The cost of your filet from fish to sea</h2>
                        </header>
                        <h3 id="author">By Estelle Hooper, Eva Ruse, Gabriella Chu</h3>
                        <p>Welcome to our restaurant. I'm your server, Fishy Business.</p>
                        <p>Please order any of our specials!</p>
                        <div id='scrollInfo' class="invisible">
                            <h4 id="scrollText" class="textCenter bounce">scroll to continue</h4>
                            <div class="scroll-down"></div>
                        </div>

                    </div>
                </section>

                <div id="hiddenSections" class="hidden">

                    <section id="text1" class="step" height="100vh">
                        <p>We hope you enjoyed your meal!</p>
                        <p>However, it looks like there are some extra costs...</p>
                    </section>

                    <section id="text2" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                    <section id="text3" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text4" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                    <section id="text1000" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text5" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text10" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text6" class="step" height="100vh">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
                            voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
                            cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </section>

                    <section id="text7" class="step" height="100vh">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
                            voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
                            cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </section>
                    <section id="text10" class="step" height="400px">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                </div>


            </div>
            <div id="chartContainer">
                <p id="titleFreshwater" class="barchartTitle">Freshwater Consumption (m<sup>3</sup>)</p>
                <p id="titleLand" class="barchartTitle hiddenRemove">Land Use (m<sup>2</sup>)</p>
                <p id="titleNitrogen" class="barchartTitle hiddenRemove">Nitrogen Emitted (kg)</p>
                <p id="titlePhosphorous" class="barchartTitle hiddenRemove">Phosphorous Emitted (kg)</p>

                <p id="barChartSubtitle">Comparison to Other Seafood</p>
                <svg id="bar1" height="425" width="550"></svg>
                <p id="citeFreshwater" class="cite">Source: <a
                        href='https://ourworldindata.org/grapher/freshwater-use-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Freshwater use per kilogram of seafood production
                    m<sup>3</sup> per kilogram (2021)</p>

                <p id="citeLand" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/land-use-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Land use per kilogram of seafood production
                    m<sup>2</sup> per kilogram (2021)</p>

                <p id="citeNitrogen" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/nitrogen-emissions-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Nitrogen emissions per tonne of seafood per kilogram
                    (2021) (calculations were converted from tonne to kg). Conversions were done using <a
                        href='https://www.aqua-calc.com/' target="_blank">Aqua-Calc.</a></p>
                <p id="citePhosphorous" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/phosphorous-emissions-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Phosphorous emissions per tonne of seafood per kilogram
                    (2021) (calculations were converted from tonne to kg). Conversions were done using <a
                        href='https://www.aqua-calc.com/' target="_blank">Aqua-Calc.</a></p>
            </div>
            <div id="infoGraphicContainer">
                <!-- append infographic images here -->
                <!-- freshwater -->
                <div id=freshwatersalmon class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.16 m<sup>3</sup> of freshwater is consumed, which is about
                        <strong>42 gallons.</strong>
                    </p>
                    <img src="images/freshwater-salmon.png" width="350"> </img>
                </div>
                <div id=freshwatertilapia class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 1.23 m<sup>3</sup> of freshwater is consumed, which is
                        about <strong>325 gallons.</strong></p>
                    <img src="images/freshwater-tilapia.png" width="350"> </img>
                </div>
                <div id=freshwatershrimp class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.22 m<sup>3</sup> of freshwater is consumed, which is about
                        <strong>58 gallons.</strong>
                    </p>
                    <img src="images/freshwater-shrimp.png" width="350"> </img>
                </div>
                <!-- land -->
                <div id=landsalmon class="land hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 4.86 m<sup>2</sup> of land is used, which is about
                        <strong>1.2 king-sized mattresses</strong>
                    </p>
                    <img src="images/land-salmon.png" width="350"> </img>
                </div>
                <div id=landtilapia class="land hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 15.27 m<sup>2</sup> of land is used, which is
                        about <strong>3.9 king-sized mattresses.</strong></p>
                    <img src="images/land-tilapia.png" width="350"> </img>
                </div>
                <div id=landshrimp class="land hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 13.18 m<sup>2</sup> of land is used, which is about
                        <strong>3.4 king-sized mattresses.</strong>
                    </p>
                    <img src="images/land-shrimp.png" width="350"> </img>
                </div>
                <!-- nitrogen -->
                <div id=nitrogensalmon class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.111 kg of nitrogen is emitted, which is about
                        <strong>157 cans of Lysol (19 fl oz)</strong>
                    </p>
                    <img src="images/nitrogen-salmon.png" width="350"> </img>
                </div>
                <div id=nitrogentilapia class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 0.200 kg of nitrogen is emitted, which is
                        about <strong>284 cans of Lysol (19 fl oz).</strong></p>
                    <img src="images/nitrogen-tilapia.png" width="350"> </img>
                </div>
                <div id=nitrogenshrimp class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.123 kg of nitrogen is emitted, which is about
                        <strong>180 cans of Lysol (19 fl oz).</strong>
                    </p>
                    <img src="images/nitrogen-shrimp.png" width="350"> </img>
                </div>
                <!-- phosphorous -->
                <div id=phossalmon class="phos hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.026 kg of phosphorous is emitted, which is about
                        <strong>2.9 teaspoons.</strong>
                    </p>
                    <img src="images/phosphorous-salmon.png" width="350"> </img>
                </div>
                <div id=phostilapia class="phos hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 0.024 kg of phosphorous is emitted, which is
                        about <strong>2.7 teaspoons.</strong></p>
                    <img src="images/phosphorous-tilapia-shrimp.png" width="350"> </img>
                </div>
                <div id=phosshrimp class="phos hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.024 kg of phosphorous is emitted, which is about
                        <strong>2.7 teaspoons.</strong>
                    </p>
                    <img src="images/phosphorous-tilapia-shrimp.png" width="350"> </img>
                </div>
            </div>
            <div id='AbsScrollInfo' class="invisible">
                <h4 id="scrollText" class="textCenter bounce">scroll to continue</h4>
                <div class="scroll-down"></div>
            </div>
            <div id="resetContainer" class="transparent">
                <!-- append button here -->
            </div>
        </div>
        </div>

</body>

<script>
    // d3.selectAll(".menuTitle").
    const map_svg = d3.select("#choropleth");
    const map_width = map_svg.attr("width");
    const map_height = map_svg.attr("height");
    const map_margin = { top: 5, right: 5, bottom: 5, left: 5 };
    const mapWidth = map_width - map_margin.left - map_margin.right;
    const mapHeight = map_height - map_margin.top - map_margin.bottom;
    const map = map_svg.append("g")
        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")");

    const graph_svg = d3.select("#graph");
    const graph_width = graph_svg.attr("width");
    const graph_height = graph_svg.attr("height");
    const graph_margin = { top: 20, right: 20, bottom: 60, left: 100 };
    const graphWidth = graph_width - graph_margin.left - graph_margin.right;
    const graphHeight = graph_height - graph_margin.top - graph_margin.bottom;
    const graph = graph_svg.append("g")
        .attr("transform", "translate(" + graph_margin.left + "," + graph_margin.top + ")");

    let graph_annotations = graph_svg.append("g").attr("id", "annotations");

    const chart1 = d3.select("#bar1");
    const width1 = chart1.attr("width");
    const height1 = chart1.attr("height");
    const margin1 = { top: 35, right: 10, bottom: 45, left: 150 };
    const chartWidth1 = width1 - margin1.left - margin1.right;
    const chartHeight1 = height1 - margin1.top - margin1.bottom;
    let annotations1 = chart1.append("g").attr("id", "annotations");
    const chartArea1 = chart1.append("g").attr("transform", "translate(" + margin1.left + "," + margin1.top + ")");


    const getData = async function () {

        // bar chart data
        let water_use = await d3.csv("data/water-use.csv", d3.autotype);
        let land_use = await d3.csv("data/land-use.csv", d3.autotype);
        let nitrogen_emissions = await d3.csv("data/nitrogen-use.csv", d3.autotype);
        let phos_emissions = await d3.csv("data/phos-use.csv", d3.autotype);

        // map data
        const world_data = await d3.json("countries-110m.json");
        const centroid_data = await d3.csv("data/centroids.csv", d3.autotype);

        const bbox_data = await d3.csv("data/country-boundingboxes.csv", d3.autotype);

        // line graph data
        let compareFishing = await d3.csv("data/capture-fisheries-vs-aquaculture.csv", d3.autotype);


        // can either be Salmon, Shrimp, or Tilapia
        salmon_water_use = water_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        tilapia_water_use = water_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        shrimp_water_use = water_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Freshwater use (m3 / kg edible weight)']

        salmon_land_use = land_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Land use (m2 / kg edible weight)']
        tilapia_land_use = land_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Land use (m2 / kg edible weight)']
        shrimp_land_use = land_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Land use (m2 / kg edible weight)']

        salmon_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        tilapia_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        shrimp_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Nitrogen (kgN / t edible weight)']

        salmon_phos_emissions = phos_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        tilapia_phos_emissions = phos_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        shrimp_phos_emissions = phos_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Phosphorous (kgP / t edible weight)']

        // GLOBAL VARS
        // fish selection: salmon, shrimp, tilapia
        var selectedFish = null

        // boolean to track if the receipt should be added
        var addReceipt = false

        // scales
        var combinedScale = 0
        var graph_leftAxis = 0

        // selections
        receipt = d3.select(".receipt")
        menu = d3.select(".menu")
        chartCont = d3.select('#chartContainer')
        infoCont = d3.select('#infoGraphicContainer')
        allCite = d3.selectAll('.cite')
        allBarTitle = d3.selectAll('.barChartTitle')

        // buttons for line graph

        initialEstelle = async function () {
            d3.select('#AbsScrollInfo').classed('invisible', true)
            /*
            handles receipt, selects infographics
            */
            console.log('initialEstelle')

            // in case user scrolls too fast
            chartCont.style('opacity', 0)
            infoCont.style('opacity', 0)

            currentDish = d3.selectAll('.currentDish').classed('fadeIn', false);
            await currentDish.transition().style('opacity', 0).end();

            addReceipt = true;

            menu.classed("hidden", false);
            menu.transition().style('opacity', 1).style('transform', "translateX(0px)")


            // receipt.selectAll(".receiptText").remove();

            receipt.classed("hiddenRemove", true);
            // receipt.transition().style('opacity', 1).style('transform', "translateX(0px)")

        }

        estelle1 = async function () {
            // remove prev Receipt info
            receipt.select("#water").text('')
            receipt.select("#waterPrice").text('')

            console.log('estelle1')

            d3.select('#AbsScrollInfo').classed('invisible', false)

            await menu.transition().style('opacity', 0).style('transform', "translateX(-200px)").end()
            await infoCont.transition().style('opacity', 0).end()

            receipt = d3.select(".receipt")
            receipt.transition().duration(200).style('transform', 'translateX(0px)');
            receipt.classed('hiddenRemove', false)
            receipt.classed('fadeIn', true)

            chartCont.style('opacity', 0)

            console.log(menu);

            // receipt.selectAll(".receiptText").remove();
            // receipt.selectAll(".dashed-line").remove();
            console.log(selectedFish)

            if (addReceipt == true) {
                infoCont.style("opacity", 0);

                menu.classed('hidden', true);
                menu.attr("height", 0)
                //add our receipt stuff

                receipt.classed('hidden', false);


                if (selectedFish === 'salmon') {
                    dish = "Miso Salmon"
                    price = "$31.00"
                }
                else if (selectedFish === 'shrimp') {
                    dish = "Spicy Cajun Shrimp"
                    price = "$27.00"
                }
                else if (selectedFish === 'tilapia') {
                    dish = "Fried Tilapia Sandwich"
                    price = "$23.00"
                }

                receipt.select("#dishName").text(dish).classed('fadeIn', true)
                receipt.select("#dishPrice").text(price).classed('fadeIn', true)

                // addDish.append('img').attr('src', "images/" + selectedFish + ".jpg").attr('class', 'currentDish').classed('fadeIn', true);
                console.log('executed')
                addReceipt = false

                d3.select("#text1").transition().style('opacity', 1);
            }

        }
        addWaterInfo = async function () {

            // hide prev infographics
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            // unhide water infographic
            info = d3.select("#freshwater" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            // in case user scrolls too fast

            menu.transition().style('opacity', 0).style('transform', "translateX(-200px)");
            console.log('addWater');

            // move receipt to make room for the infographic
            await receipt.transition().duration(200).style('transform', 'translateX(-275px)').end();

            receipt.select("#water").text('Freshwater').classed('fadeIn', true)
            receipt.select("#waterPrice").html(fish_water_use + ' m<sup>3</sup').classed('fadeIn', true)

            infoCont.transition().duration(200).style('opacity', 1).end()
        }

        addWaterBar = async function () {
            // remove prev Receipt info
            receipt.select("#land").text('')
            receipt.select("#landPrice").text('')

            chartCont.transition().duration(200).style('opacity', 1)

            // drawChart(water_use, barScale1, leftAxisScale1,'Freshwater use (m3 / kg edible weight)');

            chartArea1.selectAll('rect.bar').data(water_use)
                .join('rect')
                .attr('class', 'bar')
                .attr("fill", d => highlightBar('freshwater', d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr('x', d => barScale1(0))
                .attr('y', d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr("height", leftAxisScale1.bandwidth())
                .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))

        }

        addLandInfo = async function () {

            console.log('addLand')

            // hide previous infographics
            await d3.selectAll('.freshwater').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide land infographic
            info = d3.select("#land" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            receipt.select("#land").text('Land').classed('fadeIn', true)
            receipt.select("#landPrice").html(fish_land_use + " m<sup>2</sup>").classed('fadeIn', true)


        }

        addLandBar = async function () {
            // remove prev Receipt info
            receipt.select("#nitrogen").text('')
            receipt.select("#nitrogenPrice").text('')

            await chartCont.transition().duration(200).style('opacity', 1).end();
            drawChart(land_use, barScale2, leftAxisScale1, 'Land use (m2 / kg edible weight)', 'land')
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titleLand").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citeLand").classed('hiddenRemove', false)

        }

        addNitrogenInfo = async function () {
            console.log('addNitrogen')

            // hide previous infographics
            await d3.selectAll('.land').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide nitrogen infographic
            info = d3.select("#nitrogen" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            receipt.select("#nitrogen").text('Nitrogen Emitted').classed('fadeIn', true)
            receipt.select("#nitrogenPrice").text(fish_nitrogen_emissions + ' kg').classed('fadeIn', true)
        }

        addNitrogenBar = async function () {
            // remove prev Receipt info
            receipt.select("#phos").text('')
            receipt.select("#phosPrice").text('')

            await chartCont.transition().duration(200).style('opacity', 1).end();

            drawChart(nitrogen_emissions, barScale3, leftAxisScale1, 'Nitrogen (kgN / t edible weight)', 'nitrogen')
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titleNitrogen").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citeNitrogen").classed('hiddenRemove', false)

        }

        addPhosInfo = async function () {
            console.log('addPhos')

            // hide previous infographics
            await d3.selectAll('.nitrogen').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide phos infographic
            info = d3.select("#phos" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);
            receipt.select("#phos").text('Phosphorous Emitted').classed('fadeIn', true)
            receipt.select("#phosPrice").text(fish_phos_emissions + ' kg').classed('fadeIn', true)

        }

        addPhosBar = async function () {

            await d3.select(".map").transition().duration(100).style('opacity', 0).end();
            d3.select(".map").classed("hiddenRemove", true);

            // make receipt invisible
            receipt.classed('hiddenRemove', false);

            // make infographic visible
            infoCont.transition().style('opacity', 1)

            await chartCont.transition().duration(200).style('opacity', 1).end();
            drawChart(phos_emissions, barScale4, leftAxisScale1, 'Phosphorous (kgP / t edible weight)', 'phosphorous')
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titlePhosphorous").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citePhosphorous").classed('hiddenRemove', false)

        }

        addMap = async function () {
            // make receipt invisible
            infoCont.style("opacity", 0);

            receipt.classed('fadeIn', false);
            receipt.classed('hiddenRemove', true);

            // make bar chart invisible
            chartCont.transition().style('opacity', 0)

            // make infographic invisible
            infoCont.transition().style('opacity', 0)

            // make map visible
            d3.select(".map").classed('hiddenRemove', false);
            d3.select(".map").transition().duration(100).style("opacity", 1);

            //if scrolling backwards
            d3.select(".lineGraph").classed('hiddenRemove', true);
        }

        function animateGraph() {
            // remove any previous scales, and lines
            d3.selectAll(".y-axis").remove();
            d3.selectAll(".x-axis").remove();

            d3.selectAll("path").remove();

            let graph_leftGridlines = d3.axisLeft(combinedScale)
                .tickSize(-graphWidth - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "y-axis")
                .attr("transform", `translate(${graph_margin.left - 10},${graph_margin.top})`)
                .call(graph_leftAxis)

            let graph_bottomAxis = d3.axisBottom(dateScale)
            let graph_bottomGridlines = d3.axisBottom(dateScale)
                .tickSize(-graphHeight - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${graph_margin.left},${graphHeight + graph_margin.top + 10})`)
                .call(graph_bottomAxis);


            //Making the line generators
            var capturelineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Capture fisheries production (metric tons)'])))
                .curve(d3.curveMonotoneX);

            var aqualineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Aquaculture production (metric tons)'])))
                .curve(d3.curveMonotoneX);


            // graph.append('text')
            //     .text('Year')
            //     .attr('x', graphWidth / 2 - 30)
            //     .attr('y', graphHeight + graph_margin.bottom - 5)
            //     .attr('font-size', '20px')
            //     .style('font-weight', 'bold');


            // graph.append('text').text('Metric Tons')
            //     .attr("transform", "rotate(-90)")
            //     .attr('x', -graphHeight + 180)
            //     .attr('y', -85)
            //     .style('font-weight', 'bold')
            //     ;

            // Making area transitions

            const capture_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Capture fisheries production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));


            const aqua_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Aquaculture production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));

            // Making area transitions
            const zeroArea = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function () { return 0; })
                .curve(d3.curveCatmullRom.alpha(0.5));


            //aqua
            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#FF3B3B')
                .style("opacity", 0.3)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return capture_area(dataset) //must pass country dataset
                })
                .style('fill', '#FF3B3B')
                .style("opacity", 0.3)


            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#1786FF')
                .style("opacity", 0.3)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return aqua_area(dataset) //must pass country dataset
                })
                .style('fill', '#1786FF')
                .style("opacity", 0.3)

            // Making the lines
            const capture_path = graph.append("path")
                .datum(capture_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "#FF3B3B")
                .attr("stroke-width", 2)
                .attr("d", capturelineGen);

            const aqua_path = graph.append("path")
                .datum(aqua_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "#1786FF")
                .attr("stroke-width", 2)
                .attr("d", aqualineGen);

            // Making line transitions
            const capture_length = capture_path.node().getTotalLength();

            capture_path.attr("stroke-dasharray", capture_length + " " + capture_length)
                .attr("stroke-dashoffset", capture_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)

            const aqua_length = aqua_path.node().getTotalLength();

            aqua_path.attr("stroke-dasharray", aqua_length + " " + aqua_length)
                .attr("stroke-dashoffset", aqua_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)

            // adding line graph markers
            let mouseGroup = graph.append("g");
            let xMarker = mouseGroup.append("line")
                .attr("id", "xMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 1)
                .attr("y1", 0)
                .attr("y2", graphHeight)
                .attr("visibility", "hidden");

            let valueMarker = mouseGroup.append("circle")
                .attr("id", "valueMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 2)
                .attr("r", 10)
                .attr("visibility", "hidden");


            let valueMarker2 = mouseGroup.append("circle")
                .attr("id", "valueMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 2)
                .attr("r", 10)
                .attr("visibility", "hidden");

            // let label = mouseGroup.append("text")
            //     .attr("id", "label")
            //     .attr("visibility", "hidden");

            let activeRegion = mouseGroup.append("rect")
                .attr("id", "activeRegion")
                .attr("width", graphWidth)
                .attr("height", graphHeight)
                .attr("fill", "none")
                .attr("pointer-events", "all");

            // line graph tooltip code
            const mouseover = graph_svg.append("g").attr("class", "mouseover")
                .attr("transform", `translate(${graph_margin.left + 15},${graph_margin.top + 15})`);

            function stringLen(str) {
                const dummytext = mouseover.append("text").attr("class", "legendtext").attr("visibility", "hidden");
                dummytext.text(str)
                let len = dummytext.node().getComputedTextLength()
                dummytext.remove()
                return len;
            }
            console.log(stringLen("hello world"));

            const frame = mouseover.append("rect").attr("class", "frame")
                .attr("x", 0).attr("y", 0)
                .attr("rx", 5).attr("ry", 5)  // rx and ry round corners
                .attr("height", 130)
                .attr("opacity", 0.8)
                .attr("pointer-events", "none");  // set width later
            const textbox = mouseover.append("g").attr("transform", "translate(10,10)");
            const format = d3.format(',d');


            // When the mouse enters, show the annotations
            activeRegion.on("mouseover", function () {
                xMarker.attr("visibility", "");
                valueMarker.attr("visibility", "");
                valueMarker2.attr("visibility", "");
                // label.attr("visibility", "");

                mouseover.attr("visibility", "");
            });

            // When the mouse leaves, hide the annotations
            activeRegion.on("mouseout", function () {
                xMarker.attr("visibility", "hidden");
                valueMarker.attr("visibility", "hidden");
                valueMarker2.attr("visibility", "hidden");
                // label.attr("visibility", "hidden");
                mouseover.attr("visibility", "hidden");
            });


            console.log('compareFishing', compareFishing)
            let findDate = d3.bisector(d => d.Year).right;

            activeRegion.on("mousemove", function (evt) {

                let location = d3.pointer(evt);
                let x = location[0];
                let xDate = dateScale.invert(x);
                let index = findDate(dataset, xDate);
                let d = dataset[index];

                let xPos = dateScale(d['Year']);
                let yPos = combinedScale(d['Capture fisheries production (metric tons)']);
                let yPos2 = combinedScale(d['Aquaculture production (metric tons)']);

                xMarker.attr("x1", xPos).attr("x2", xPos);
                valueMarker.attr("cx", xPos).attr("cy", yPos);
                valueMarker2.attr("cx", xPos).attr("cy", yPos2);



                textbox.html('');  // shorthand to empty out an element

                let countryName = `${d['Entity']}`;
                let year = `${d['year']}`;
                let aqua = `${format(d['Aquaculture production (metric tons)'])} metric tons`;
                let capture = `${format(d['Capture fisheries production (metric tons)'])} metric tons`;

                let maxWidth = Math.max(stringLen(countryName), stringLen(aqua), stringLen(capture))
                frame.attr("width", maxWidth + 20);

                textbox.append("text").attr('class', 'tooltipTitle').text(countryName + ' (' + year + ')')
                    .attr("x", 0).attr("y", 10);
                textbox.append("text").attr('class', 'capture textBold').text("Capture Fisheries")
                    .attr("x", 0).attr("y", 40);
                textbox.append("text").attr('class', 'capture').text(capture)
                    .attr("x", 0).attr("y", 60);
                textbox.append("text").attr('class', 'aqua textBold').text("Aquaculture")
                    .attr("x", 0).attr("y", 90);
                textbox.append("text").attr('class', 'aqua').text(aqua)
                    .attr("x", 0).attr("y", 110);

            });
        }

        //reset button

        buttonCont = d3.select('#resetContainer');
        resetButton = buttonCont.append("button").attr("class", "resetButton")
        resetButton.append('h3').text("Order Again?")
        resetButton.on("click", function () {
            window.location.reload(true);
        })

        addLineGraph = async function () {
            d3.select('#AbsScrollInfo').classed('invisible', false)
            buttonCont.classed('fadeIn', false);
            buttonCont.classed('transparent', true);
            animateGraph();

            // make map invisible
            d3.select(".map").classed('hiddenRemove', true);

            // make line graph visible
            d3.select(".lineGraph").classed('hiddenRemove', false);
            d3.select('.lineGraph').classed('fadeIn', true)

            console.log('dataset', dataset)
            console.log('buttonsData', buttonsData)

            // adding buttons
            if (addButtons == true) {
                addButtons = false;
                const buttonsdiv = d3.select('.buttons')
                buttons = buttonsdiv.selectAll('button').data(buttonsData).join('button')
                // console.log("selected",  buttons.select("button:first-child"))

                d3.select(".buttons button:first-child").classed("selectedButton", true);

                // buttons.selectAll("button").select("button:first-child")

                buttons.on('click', function (d, i) {
                    [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph(i)
                    animateGraph()
                    d3.selectAll(".buttons button").classed("selectedButton", false)
                    d3.select(this).classed('selectedButton', true)
                })

                buttons.append('h3').html(function (d, i) { return d });
            }
        }


        showReset = async function () {
            d3.select('#AbsScrollInfo').classed('invisible', true)
            d3.select('.lineGraph').classed("hiddenRemove", true);
            buttonCont.classed('fadeIn', true);
            buttonCont.classed('transparent', false);

        }


        function createScales() {
            // Setting up scales and axes for the 4 bar charts (do we need 4 separate bar charts or should we update the same one?)

            //removing "(farmed)" from each of the fish entities
            species = water_use.map(d => d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1))

            //making scales and axes for water
            water_values = water_use.map(d => Number(d['Freshwater use (m3 / kg edible weight)']))
            land_values = land_use.map(d => Number(d['Land use (m2 / kg edible weight)']))
            nitrogen_values = nitrogen_emissions.map(d => Number(d['Nitrogen (kgN / t edible weight)']))
            phos_values = phos_emissions.map(d => Number(d['Phosphorous (kgP / t edible weight)']))

            leftAxisScale1 = d3.scaleBand().domain(species).range([chartHeight1, 0]).padding(0.05);

            barvalueExtent1 = d3.extent(water_values)
            barScale1 = d3.scaleLinear().domain([0, barvalueExtent1[1]]).range([0, chartWidth1]);
            console.log('barscale1')
            console.log(barScale1)

            let leftAxis1 = d3.axisLeft();
            let leftAxisG1 = annotations1.append("g")
                .attr("class", "y-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1}, ${margin1.top})`);
            leftAxis1.scale(leftAxisScale1);
            leftAxisG1.transition().call(leftAxis1);

            let bottomAxis1 = d3.axisBottom();
            let bottomAxisG1 = annotations1.append("g")
                .attr("class", "x-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            bottomAxis1.scale(barScale1);
            bottomAxisG1.transition().call(bottomAxis1);

            //making scales and axes for land
            barvalueExtent2 = d3.extent(land_values)
            barScale2 = d3.scaleLinear().domain([0, barvalueExtent2[1]]).range([0, chartWidth1]);

            //making scales and axes for nitrogen
            barvalueExtent3 = d3.extent(nitrogen_values)
            barScale3 = d3.scaleLinear().domain([0, barvalueExtent3[1]]).range([0, chartWidth1]);

            //making scales for phos
            barvalueExtent4 = d3.extent(phos_values)
            barScale4 = d3.scaleLinear().domain([0, barvalueExtent4[1]]).range([0, chartWidth1]);
        }

        createScales();

        d3.selectAll(".menuTitle")
            .on('click', orderUp)

        function drawGraph(country) {

            console.log('country', country)
            country = compareFishing.filter(d => d.Entity === country)
            country = country.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
            country = country.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

            // sorting by date because Honduras has data out of order, messing up our line animations
            country = country.sort((a, b) => a.Year - b.Year)

            console.log('subsetdata', country)

            captureExtent = d3.extent(country, d => d['Capture fisheries production (metric tons)']);
            aquaExtent = d3.extent(country, d => d['Aquaculture production (metric tons)'])

            dateExtent = d3.extent(country, d => d['Year']);
            dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

            capture_subset = country.map(row => ({
                "Year": row.Year,
                "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
            }));

            aqua_subset = country.map(row => ({
                "Year": row.Year,
                "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
            }));

            let combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];

            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);
            graph_leftAxis = d3.axisLeft(combinedScale)

            dataset = country;

            if (selectedFish === 'salmon') {
                buttonsData = salmonCountries;
            }
            else if (selectedFish === 'shrimp') {
                buttonsData = shrimpCountries;
            }
            else if (selectedFish === 'tilapia') {
                buttonsData = tilapiaCountries;
            }


            return [dataset, buttonsData, captureExtent, aquaExtent]
        }

        function orderUp() {
            selectedFish = this.id;

            initialEstelle();
            scroll()
            console.log('scroll happened')

            addReceipt = true;
            addButtons = true;
            // d3.selectAll('p').classed('hidden', false)

            orders = d3.selectAll(".order")
            menuTitles = d3.selectAll('.menuTitle')

            // the ones the user didn't select, make beige
            menuTitles.classed('orderNotSelected', true)
            orders.classed('orderNotSelected', true)
            d3.select(this).classed('orderNotSelected', false)
            d3.select(this.parentNode).classed('orderNotSelected', false)

            // cannot click another selection
            menu.style("pointer-events", "none")

            // turn off fading text
            menuSection = d3.select('section#menu')
            menuSection.selectAll(".fadeInOut").classed("fadeInOut", false)

            // make arrow visible
            d3.select('#scrollInfo').classed('invisible', false).classed('fadeIn', true);

            console.log('orderup')



            // d3.select('.menu').style('display', 'none')
            // d3.select('#menuContainer').style('display', 'none')

            if (selectedFish === 'salmon') {
                fish_water_use = salmon_water_use
                fish_land_use = salmon_land_use
                fish_nitrogen_emissions = salmon_nitrogen_emissions
                fish_phos_emissions = salmon_phos_emissions
            }
            else if (selectedFish === 'shrimp') {
                fish_water_use = shrimp_water_use
                fish_land_use = shrimp_land_use
                fish_nitrogen_emissions = shrimp_nitrogen_emissions
                fish_phos_emissions = shrimp_phos_emissions
            }
            else if (selectedFish === 'tilapia') {
                fish_water_use = tilapia_water_use
                fish_land_use = tilapia_land_use
                fish_nitrogen_emissions = tilapia_nitrogen_emissions
                fish_phos_emissions = tilapia_phos_emissions
            }

            // reveal next section
            dishSection = d3.select('#hiddenSections').classed('hidden', false);

            // start of map code

            salmonCountries = ["Norway", "Sweden", "Denmark", "United Kingdom", "Chile"]
            shrimpCountries = ['India', 'China', 'Vietnam', 'Indonesia', 'Thailand']
            tilapiaCountries = ['China', 'Indonesia', 'Honduras', 'Mexico', "Netherlands"];


            const colors = ["#052132", "#00375E", "#005D8F", "#0978AF", "#1A93CF"];
            const topColorScale = d3.scaleOrdinal(colors).domain([0, 1, 2, 3, 4]);

            var countries = topojson.feature(world_data, world_data.objects.countries);

            console.log('countries', countries);
            var countriesMesh = topojson.mesh(world_data, world_data.objects.countries);
            console.log('countries original mesh', countriesMesh)
            var projection = d3.geoRobinson().fitSize([mapWidth, mapHeight], countries);
            var path = d3.geoPath().projection(projection);

            // coloring function for different fish selections
            function countryColor(country) {
                if (selectedFish === 'salmon') { ranking = salmonCountries.indexOf(country) }
                else if (selectedFish === 'shrimp') { ranking = shrimpCountries.indexOf(country) }
                else if (selectedFish === 'tilapia') { ranking = tilapiaCountries.indexOf(country) }

                console.log("fish")
                console.log(selectedFish);

                if (ranking > -1) {
                    return topColorScale(ranking)
                }
                else {
                    return "#f4f1e4"
                }
            }

            // making the map paths
            let viewport = map.append("g");

            console.log('countries.features', countries.features)

            viewport.selectAll(".countries").data(countries.features)
                .join("path")
                .attr("class", "countries")
                // .attr('stroke', 'darkgray')
                .attr('fill', d => countryColor(d.properties.name))
                .attr("d", path)

            viewport.append("path")
                .datum(countriesMesh)
                .attr("class", "country-outline")
                .attr("d", path);

            // making the legend
            // reference: https://stackoverflow.com/questions/41090920/how-to-position-the-legend-in-a-d3-chart
            var legendText = ["#1 Exporter", "#2 Exporter", "#3 Exporter", "#4 Exporter", "#5 Exporter"];

            var legend = map.selectAll(".legend")
                .data(colors)
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

            legend.append("rect").data(colors)
                .attr("x", 20)
                .attr("y", 450)
                .attr("width", 20)
                .attr("height", 20)
                .attr("fill", d => d)

            legend.append("text").data(legendText)
                .attr("x", 45)
                .attr("y", 465)
                .text(d => d)
                .style("font-size", "12px")



            // making the country marks

            if (selectedFish === "salmon") { selectedCountries = salmonCountries }
            else if (selectedFish === "shrimp") { selectedCountries = shrimpCountries }
            else if (selectedFish === "tilapia") { selectedCountries = tilapiaCountries }

            selectedCountries.forEach((d) => {
                //d is the country name
                console.log(d)
                selectedCountry = centroid_data.filter(i => i['COUNTRY'] === d);
                // selectedCoun = countries.features.filter(i => i.properties['name'] === d);

                console.log(selectedCountry)


                let markPos = projection([selectedCountry[0]['longitude'], selectedCountry[0]['latitude']]);
                console.log(markPos)

                let pinCountry = selectedCountry[0]["COUNTRY"];
                console.log(pinCountry);


                let textbox = map.append("g")
                    .attr("class", "tooltip")
                    .attr("visibility", "hidden");

                textbox.append("rect")
                    .attr("opacity", 0.8)
                    .attr("fill", "white")
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("height", 25)
                    .attr("width", function () {
                        if (pinCountry.length < 9) {
                            return pinCountry.length * 10;
                        }
                        else if (pinCountry.length === 9) {
                            return 80;
                        }
                        else if (pinCountry.length === 11) {
                            return 95;
                        }
                        else {
                            return 120;
                        }
                    })
                    .attr("alignment-baseline", "hanging")
                    .attr("rx", 8)

                textbox.append("text")
                    .text(pinCountry)
                    .attr("x", 2)
                    .attr("y", 5)
                    .attr("text-anchor", "right")
                    .attr("alignment-baseline", "hanging")

                textbox.attr("transform", `translate(${markPos[0] + 2},${markPos[1] + 3})`);

                map.append("image")
                    .attr('class', 'mark')
                    .attr("xlink:href", "images/mappin.png")
                    .attr("x", markPos[0] - 11)
                    .attr("y", markPos[1] - 14)
                    .attr("width", 20)
                    .attr("height", 20)
                    .on("mouseover", function () {
                        textbox.style("visibility", "visible")
                        d3.select(this).style("cursor", "pointer");
                    })
                    .on("mouseout", function () { textbox.style("visibility", "hidden") })
                    .on("click", clickedPin);

                function clickedPin(event) {
                    countryNodes = d3.selectAll(".countries").nodes()

                    select = countryNodes.filter(i => i.__data__.properties.name === d)[0].__data__

                    newcountries = { 'type': 'FeatureCollection', 'features': [select] };


                    viewport.selectAll(".countries").style('display', 'none');
                    viewport.selectAll(".country-outline").style('display', 'none');
                    map.selectAll(".legend").style('display', 'none');
                    map.selectAll(".mark").style('display', 'none');
                    map.selectAll(".tooltip").style('display', 'none');

                    var projection = d3.geoMercator().fitSize([mapWidth / 2, mapHeight], newcountries);
                    // console.log(projection);
                    var path = d3.geoPath().projection(projection);
                    // console.log(path);

                    // Draw the map
                    map_svg.append("g")
                        .selectAll("path")
                        .data(newcountries.features)
                        .enter()
                        .append("path")
                        .attr('class', 'newcountry')
                        .attr("fill", d => countryColor(d.properties.name))
                        .attr("d", path)
                        .style("stroke", "none")


                    var backButton = map.append("rect").attr("fill", "lightgrey")
                        .attr('class', 'backButton')
                        .attr('height', 50)
                        .attr('width', 100)
                        .attr('x', mapWidth - 118)
                        .attr('y', mapHeight - 65)
                        .attr("rx", 5)
                        .attr("ry", 5)
                        .style("stroke", "black")
                        .style("stroke-width", 1)
                        .on("mouseover", function () { d3.select(this).style("cursor", "pointer") });

                    map.append("text").text("Reset Map")
                        .attr("class", "buttonText")
                        .attr('x', mapWidth - 105)
                        .attr('y', mapHeight - 35)
                        .on("mouseover", function () { d3.select(this).style("cursor", "pointer") })
                        .on("click", clickMapButton);



                    backButton.on("click", clickMapButton);

                    function clickMapButton() {
                        viewport.selectAll(".countries").style('display', 'block');
                        viewport.selectAll(".country-outline").style('display', 'block');
                        map.selectAll(".legend").style('display', 'block');
                        map.selectAll(".mark").style('display', 'block');
                        map.selectAll(".tooltip").style('display', 'block');
                        d3.selectAll('.newcountry').style('display', 'none');
                        map.selectAll('.backButton').style('display', 'none');
                        map.selectAll('.backButton').style('display', 'none');
                        map.selectAll(".buttonText").style('display', "none")
                        map.selectAll(".fisheryImage").style('display', "none")
                        map.selectAll(".imageText").style('display', "none")

                    }

                    var imageLink = "images/" + pinCountry.toLowerCase() + "fishery.jpeg"
                    imageLink = imageLink.replace(/\s+/g, '');


                    map.append("text").text(d + ' is the number ' + (ranking + 1) + ' exporter of ' + selectedFish)
                        .attr("class", "imageText")
                        .attr('x', mapWidth / 2 + 20)
                        .attr('y', mapHeight / 5)
                        .style("font-size", 20)



                    map.append("image")
                        .attr("class", "fisheryImage")
                        .attr("xlink:href", imageLink)
                        .attr("x", mapWidth / 2)
                        .attr("y", mapHeight / 3)
                        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")")


                }




            })


            // Making line graphs comparing traditional fishing production vs fish farms production
            // Resource for line graph and area animation: https://hackernoon.com/animating-line-charts-with-d3js
            const timeParser = d3.timeParse('%Y');
            compareFishing.forEach(d => {
                d['year'] = d['Year']
                d['Year'] = timeParser(d["Year"]);
                d['Aquaculture production (metric tons)'] = Number(d['Aquaculture production (metric tons)']);
                d['Capture fisheries production (metric tons)'] = Number(d['Capture fisheries production (metric tons)']);
            })

            console.log('selectedFish', selectedFish)

            if (selectedFish === 'salmon') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('Norway')

            }
            else if (selectedFish === 'shrimp') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('India')

            }
            else if (selectedFish === 'tilapia') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('China')

            }
            let combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];

            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);
            graph_leftAxis = d3.axisLeft(combinedScale);

        }


        function highlightBar(barType, v) {
            console.log('highlightBar')
            console.log('v', v)
            console.log('barType', barType)
            console.log('selectedFish', selectedFish)
            v = v.toLowerCase()

            if (barType == "freshwater") {
                if (v === selectedFish) {
                    return '#3b5d78';
                }
                else {
                    return '#AED5F3'
                }
            }

            if (barType == "phosphorous") {
                if (v === selectedFish) {
                    return '#893B1D';
                }
                else {
                    return '#FF9C76'
                }
            }

            if (barType == "land") {
                if (v === selectedFish) {
                    return "#137E37"
                }
                else {
                    return "#ADEFAA"
                }
            }

            if (barType == "nitrogen") {
                if (v === selectedFish) {
                    return "#50408D"
                }
                else {
                    return "#B9AAEF"
                }
            }
        }


        function drawChart(data, barscale, leftaxisscale, column, barType) {
            console.log('drawChart')

            chartArea1.selectAll('rect.bar').data(data)
                .join(enter => enter.append('rect')
                    .attr('class', 'bar')
                    .attr("x", d => barscale(0))
                    .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("height", leftaxisscale.bandwidth())
                    .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))
                    .attr("opacity", 0)
                    .call(enter => enter.transition()
                        .attr('opacity', 1)),
                    update => update.call(update => update.transition()
                        .attr("fill", d => highlightBar(barType, d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))

                        .attr("x", d => barscale(0))
                        .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("height", leftaxisscale.bandwidth())
                        .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))),
                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));
        }

        // source: https://towardsdatascience.com/how-i-created-an-interactive-scrolling-visualisation-with-d3-js-and-how-you-can-too-e116372e2c73

        let scroll = scroller().container(d3.select('#graphic'))

        let lastIndex, activeIndex = 0
        scroll.on('active', function (index) {
            d3.selectAll('.step')
                .transition().duration(500)
                .style('opacity', function (d, i) { return i === index ? 1 : 0.1; });
            //Next, we selection from a range of activationFunctions (which we create), based on the index of the current section. 
            activeIndex = index
            console.log('active index')
            console.log(activeIndex);
            let sign = (activeIndex - lastIndex) < 0 ? -1 : 1;
            let scrolledSections = d3.range(lastIndex + sign, activeIndex + sign, sign);
            console.log('scrolledSections')
            console.log(scrolledSections)

            //adding a progress bar so users know where they are in the visualization
            if (isNaN(scrolledSections[0])) {
                d3.selectAll("#progress").attr("width", "0%")
            }
            else {
                //how do we get the bar to move specifically with where we are on the page?
                d3.selectAll("#progress").transition().duration(500).attr("width", scrolledSections[0] * 8.3 + "%")
            }

            scrolledSections.forEach(i => {
                // console.log('i')
                //console.log(i)
                activationFunctions[i]();
            })
            lastIndex = activeIndex;
        })
        scroll.on('progress', function (index, progress) {
            if (index == 2 & progress > 0.7) { }

            //console.log('progress', progress)
        })

        let activationFunctions = [initialEstelle, estelle1, addWaterInfo, addWaterBar, addLandInfo, addLandBar, addNitrogenInfo, addNitrogenBar, addPhosInfo, addPhosBar, addMap, addLineGraph, showReset]

    }

    getData();
</script>

</html>