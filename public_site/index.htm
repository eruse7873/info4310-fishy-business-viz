<html>

<head>
    <link rel="stylesheet" href="styles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.minjs"></script>
    <script src="https://unpkg.com/scrollama"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>
    <script src="scroll.js"></script>
    <title>Fishy Business</title>
</head>

<body>
    <main>
        <section>
            <header id=heading class="textCenter">
                <h1 class="fancyFont">Fishy Business</h1>
                <h2 class="fancyFont">The cost of your filet from fish to sea</h2>
                <p id="author">By Estelle Hooper, Eva Ruse, Gabriella Chu</p>
            </header>
        </section>

        <section>
            <section id="menu">
                <div class="flexParent">
                    <div class="flexChild" id="startingMenu">

                        <div class="menu fancyFont">
                            <h2> Catch of the Day </h2>
                            <!-- Salmon Order -->
                            <div class="order">
                                <a href="#menu" id=salmon class="menuTitle hover-underline-animation fadeAnimation">Miso
                                    Salmon | $31</a>
                                <p>Served with bok choy, ginger rice, and microgreens.</p>
                            </div>
                            <!-- Shrimp Order -->
                            <div class="order">
                                <a href="#menu" id=shrimp
                                    class="menuTitle hover-underline-animation fadeAnimation">Spicy
                                    Cajun Shrimp | $27</a>
                                <p>Served with cheesy grits and a big spoon.</p>

                            </div>
                            <!-- Tilapia Order -->
                            <div class="order">
                                <a href="#menu" id=tilapia
                                    class="menuTitle hover-underline-animation fadeAnimation">Fried
                                    Tilapia Sandwich | $23</a>
                                <p> Served with coleslaw, pickles, tartar sauce, and a side of fries.</p>
                            </div>
                        </div>
                        <!-- Tilapia Order -->
                        <div class="order">
                            <a href="#menu" id=tilapia class="menuTitle hover-underline-animation fadeAnimation">Fried
                                Tilapia Sandwich | $23</a>
                            <p>Served with coleslaw, pickles, tartar sauce, and a side of fries.</p>
                        </div>
                    </div>
                </div>
            </section>

            <section id="dish" class="hidden">
                <div class="flexParent">
                    <div class="flexChild left">
                        <!-- use d3 to add image -->
                    </div>
                    <div class="flexChild">
                        <p class="right">Enjoy your meal!</p>
                        <p class="right italic fadeInOut">Please scroll for your receipt.</p>
                    </div>
                </div>
            </section>
        </section>

        <section>
            <div id="graphic" class="hidden">
                <div id="sections">
                    <section class="step">
                        <div class="receipt">
                            <h4> The Cost of Your Filet </h4>
                            <h5> From Plate to Sea </h5>
                            <h6> Address: blah blah 123 st</h6>
                            <h6 id='foodOrder'></h6>
                            <hr class="dashed-line">
                            <p id="water"></p>
                            <p id="land"></p>
                            <p id="nitrogen"></p>
                            <p id="phosphorous"></p>
                        </div>
                    </section>
                    <section class="step">
                        <div class="receipt">
                            <h4> The Cost of Your Filet </h4>
                            <h5> From Plate to Sea </h5>
                            <h6> Address: blah blah 123 st</h6>
                            <h6 id='foodOrder'></h6>
                            <hr class="dashed-line">
                            <p id="water"></p>
                            <p id="land"></p>
                            <p id="nitrogen"></p>
                            <p id="phosphorous"></p>
                        </div>
                    </section>
                    <section class="step">
                        <div class="receipt">
                            <h4> The Cost of Your Filet </h4>
                            <h5> From Plate to Sea </h5>
                            <h6> Address: blah blah 123 st</h6>
                            <h6 id='foodOrder'></h6>
                            <hr class="dashed-line">
                            <p id="water"></p>
                            <p id="land"></p>
                            <p id="nitrogen"></p>
                            <p id="phosphorous"></p>
                        </div>
                    </section>
                    <section class="step">
                        <div class="receipt">
                            <h4> The Cost of Your Filet </h4>
                            <h5> From Plate to Sea </h5>
                            <h6> Address: blah blah 123 st</h6>
                            <h6 id='foodOrder'></h6>
                            <hr class="dashed-line">
                            <p id="water"></p>
                            <p id="land"></p>
                            <p id="nitrogen"></p>
                            <p id="phosphorous"></p>
                        </div>
                    </section>
                </div>
                <div class="flexChild">
                    <p class="right" id="enjoyMealMessage"></p>
                    <p class="right italic fadeInOut">Please scroll for your receipt.</p>
                </div>
            </div>
        </section>

        <section>
            <div id="map" class="hidden">
                <svg id="choropleth" height="600" width="900" style="background: #EEEEEE; margin-top:50px"></svg>
            </div>
        </section>

        <section>
            <div id="lineGraph">
                <svg id="graph" height="600" width="900" style="background: #EEEEEE; margin-top:50px"></svg>
            </div>
        </section>
    </main>
</body>

<script>

    const map_svg = d3.select("#choropleth");
    const map_width = map_svg.attr("width");
    const map_height = map_svg.attr("height");
    const map_margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const mapWidth = map_width - map_margin.left - map_margin.right;
    const mapHeight = map_height - map_margin.top - map_margin.bottom;
    const map = map_svg.append("g")
        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")");

    const graph_svg = d3.select("#graph");
    const graph_width = graph_svg.attr("width");
    const graph_height = graph_svg.attr("height");
    const graph_margin = { top: 20, right: 20, bottom: 50, left: 90 };
    const graphWidth = graph_width - graph_margin.left - graph_margin.right;
    const graphHeight = graph_height - graph_margin.top - graph_margin.bottom;
    const graph = graph_svg.append("g")
        .attr("transform", "translate(" + graph_margin.left + "," + graph_margin.top + ")");

    let graph_annotations = graph_svg.append("g").attr("id", "annotations");



    const getData = async function () {

        let water_use = await d3.csv("data/freshwater-use-seafood.csv", d3.autotype);
        let land_use = await d3.csv("data/land-use-seafood.csv", d3.autotype);
        let nitrogen_emissions = await d3.csv("data/nitrogen-emissions-seafood.csv", d3.autotype);
        let phos_emissions = await d3.csv("data/phosphorous-emissions-seafood.csv", d3.autotype);

        let compareFishing = await d3.csv("data/capture-fisheries-vs-aquaculture.csv", d3.autotype);


        // can either be Salmon, Shrimp, or Tilapia
        salmon_water_use = water_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        tilapia_water_use = water_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        shrimp_water_use = water_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Freshwater use (m3 / kg edible weight)']

        salmon_land_use = land_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Land use (m2 / kg edible weight)']
        tilapia_land_use = land_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Land use (m2 / kg edible weight)']
        shrimp_land_use = land_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Land use (m2 / kg edible weight)']

        salmon_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        tilapia_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        shrimp_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Nitrogen (kgN / t edible weight)']

        salmon_phos_emissions = phos_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        tilapia_phos_emissions = phos_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        shrimp_phos_emissions = phos_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Phosphorous (kgP / t edible weight)']


        const chart1 = d3.select("#bar1");
        const width1 = chart1.attr("width");
        const height1 = chart1.attr("height");
        const margin1 = { top: 35, right: 10, bottom: 45, left: 150 };
        const chartWidth1 = width1 - margin1.left - margin1.right;
        const chartHeight1 = height1 - margin1.top - margin1.bottom;
        let annotations1 = chart1.append("g").attr("id", "annotations");
        const chartArea1 = chart1.append("g").attr("transform", "translate(" + margin1.left + "," + margin1.top + ")");

        createScales();

        d3.selectAll(".menuTitle")
            .on('mouseover', function (event) {
                d3.selectAll('.menuTitle').classed('fadeAnimation', false)
                d3.select(this).classed('orderSelected', true)
            }

            )
            .on('mouseout', function (event) {
                d3.selectAll('.menuTitle').classed('orderSelected', false)
                d3.selectAll('.menuTitle').classed('fadeAnimation', true)
            })
            .on('click', orderUp)


        function orderUp() {
            menu = d3.select(".menu")
            orders = d3.selectAll(".order")
            menuTitles = d3.selectAll('.menuTitle')

            // the ones the user didn't make beige
            menuTitles.classed('orderNotSelected', true)
            orders.classed('orderNotSelected',true)
            d3.select(this).classed('orderNotSelected', false)
            d3.select(this.parentNode).classed('orderNotSelected', false)

            // cannot click another selection
            menu.style("pointer-events", "none")

            // turn off fading text
            menuSection = d3.select('section#menu')
            menuSection.selectAll(".fadeInOut").classed("fadeInOut",false)

            console.log('orderup')

            selectedFish = this.id;

            // d3.select('.menu').style('display', 'none')
            // d3.select('#menuContainer').style('display', 'none')

            if (selectedFish === 'salmon') {
                fish_water_use = salmon_water_use
                fish_land_use = salmon_land_use
                fish_nitrogen_emissions = salmon_nitrogen_emissions
                fish_phos_emissions = salmon_phos_emissions
            }
            else if (selectedFish === 'shrimp') {
                fish_water_use = shrimp_water_use
                fish_land_use = shrimp_land_use
                fish_nitrogen_emissions = shrimp_nitrogen_emissions
                fish_phos_emissions = shrimp_phos_emissions
            }
            else if (selectedFish === 'tilapia') {
                fish_water_use = tilapia_water_use
                fish_land_use = tilapia_land_use
                fish_nitrogen_emissions = tilapia_nitrogen_emissions
                fish_phos_emissions = tilapia_phos_emissions
            }

            // d3.select('#dish').classed("hidden", false).classed("fadeIn", true)
            // d3.select('#graphic').classed("hidden",false)

            // reveal next section
            dishSection = d3.select("#dish")
            dishSection.classed("hidden", false).classed("fadeIn", true)
            graphicSection = d3.select('#graphic')
            graphicSection.classed("hidden", false).classed("fadeIn", true)

            addDish = d3.select('#dish .left')
            addDish.append('img').attr('src', "images/" + selectedFish + ".jpg")
            // console.log(selectedFish)


            // d3.selectAll('#foodOrder').text(selectedFish);


            // draw default graph, water use
            chartArea1.selectAll('rect.bar').data(water_use)
                .join('rect')
                .attr('class', 'bar')
                .attr("fill", d => highlightBar(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr('x', d => barScale1(0))
                .attr('y', d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr("height", leftAxisScale1.bandwidth())
                .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))

            d3.selectAll('#water').text(salmon_water_use + ' water').style('color', 'red')
        }

        function highlightBar(v) {
            console.log('highlightBar')
            if (v === selectedFish) {
                return 'blue';
            }
            else { return 'darkgrey'; }
        }




        let scroll = scroller().container(d3.select('#graphic'))
        scroll()
        let lastIndex, activeIndex = 0
        //This is where most of the magic happens. Every time the user scrolls, we receive a new index. First, we find all the irrelevant sections, and reduce their opacity. 
        scroll.on('active', function (index) {
            d3.selectAll('.step')
                .transition().duration(500)
                .style('opacity', function (d, i) { return i === index ? 1 : 0.1; });
            //Next, we selection from a range of activationFunctions (which we create), based on the index of the current section. 
            activeIndex = index
            console.log('active index')
            console.log(activeIndex);
            let sign = (activeIndex - lastIndex) < 0 ? -1 : 1;
            let scrolledSections = d3.range(lastIndex + sign, activeIndex + sign, sign);
            scrolledSections.forEach(i => {
                console.log('i')
                console.log(i)
                activationFunctions[i]();
            })
            lastIndex = activeIndex;
        })
        scroll.on('progress', function (index, progress) {
            if (index == 2 & progress > 0.7) { }
        })
        //I placed all the functions in an array. Each function corresponds to a different change in the visualisation. One may change the graph into a scatter plot, and another may initiate a force simulation.
        let activationFunctions = [redrawDefault,
            drawInitial,
            draw2,
            draw3
        ]

        function redrawDefault() {
            chartArea1.selectAll('rect.bar').data(water_use)
                .join(enter => enter.append('rect')
                    .attr('class', 'bar')
                    .attr("fill", d => highlightBar(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("x", d => barScale1(0))
                    .attr("y", d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("height", leftAxisScale1.bandwidth())
                    .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))
                    .attr("opacity", 0)
                    .call(enter => enter.transition()
                        .attr('opacity', 1)),
                    update => update.call(update => update.transition()
                        // .attr("fill", barChartColor(input_mbti))
                        .attr("x", d => barScale1(0))
                        .attr("y", d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("height", leftAxisScale1.bandwidth())
                        .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))),
                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));

            if (lastIndex > activeIndex) {
                d3.selectAll('#land').text('')
            }

            d3.selectAll('#water').style('color', 'red')

        }


        function createScales() {
            // Setting up scales and axes for the 4 bar charts (do we need 4 separate bar charts or should we update the same one?)

            //removing "(farmed)" from each of the fish entities
            species = water_use.map(d => d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1))

            //making scales and axes for water
            water_values = water_use.map(d => Number(d['Freshwater use (m3 / kg edible weight)']))
            land_values = land_use.map(d => Number(d['Land use (m2 / kg edible weight)']))
            nitrogen_values = nitrogen_emissions.map(d => Number(d['Nitrogen (kgN / t edible weight)']))
            phos_values = phos_emissions.map(d => Number(d['Phosphorous (kgP / t edible weight)']))

            leftAxisScale1 = d3.scaleBand().domain(species).range([chartHeight1, 0]).padding(0.05);

            barvalueExtent1 = d3.extent(water_values)
            barScale1 = d3.scaleLinear().domain([0, barvalueExtent1[1]]).range([0, chartWidth1]);
            console.log('barscale1')
            console.log(barScale1)

            let leftAxis1 = d3.axisLeft();
            let leftAxisG1 = annotations1.append("g")
                .attr("class", "y-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1}, ${margin1.top})`);
            leftAxis1.scale(leftAxisScale1);
            leftAxisG1.transition().call(leftAxis1);

            let bottomAxis1 = d3.axisBottom();
            let bottomAxisG1 = annotations1.append("g")
                .attr("class", "x-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            bottomAxis1.scale(barScale1);
            bottomAxisG1.transition().call(bottomAxis1);

            //making scales and axes for land
            barvalueExtent2 = d3.extent(land_values)
            barScale2 = d3.scaleLinear().domain([0, barvalueExtent2[1]]).range([0, chartWidth1]);

            //making scales and axes for nitrogen
            barvalueExtent3 = d3.extent(nitrogen_values)
            barScale3 = d3.scaleLinear().domain([0, barvalueExtent3[1]]).range([0, chartWidth1]);

            //making scales for phos
            barvalueExtent4 = d3.extent(phos_values)
            barScale4 = d3.scaleLinear().domain([0, barvalueExtent4[1]]).range([0, chartWidth1]);
        }


        function drawInitial() {

            // createScales()
            drawChart(land_use, barScale2, leftAxisScale1, 'Land use (m2 / kg edible weight)')
            d3.selectAll('#land').text(fish_land_use + ' land').style('color', 'red')
            d3.selectAll('#water').style('color', 'black')

            if (lastIndex > activeIndex) {
                d3.selectAll('#nitrogen').text('')
            }




        }

        function draw2() {
            drawChart(nitrogen_emissions, barScale3, leftAxisScale1, 'Nitrogen (kgN / t edible weight)')
            d3.selectAll('#nitrogen').text(fish_water_use + ' nitrogen').style('color', 'red')
            d3.selectAll('#land').style('color', 'black')

            console.log('draw2')
            console.log('activeIndex', activeIndex)
            console.log('lastIndex', lastIndex)


            if (lastIndex > activeIndex) {
                d3.selectAll('#phosphorous').text('')
            }

        }

        function draw3() {
            drawChart(phos_emissions, barScale4, leftAxisScale1, 'Phosphorous (kgP / t edible weight)')
            d3.selectAll('#phosphorous').text(fish_water_use + ' phosphorous').style('color', 'red')
            d3.selectAll('#nitrogen').style('color', 'black')


        }

        function drawChart(data, barscale, leftaxisscale, column) {
            console.log('drawChart')

            chartArea1.selectAll('rect.bar').data(data)
                .join(enter => enter.append('rect')
                    .attr('class', 'bar')
                    .attr("x", d => barscale(0))
                    .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("height", leftaxisscale.bandwidth())
                    .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))
                    .attr("opacity", 0)
                    .call(enter => enter.transition()
                        .attr('opacity', 1)),
                    update => update.call(update => update.transition()
                        .attr("fill", d => highlightBar(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))

                        .attr("x", d => barscale(0))
                        .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("height", leftaxisscale.bandwidth())
                        .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))),
                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));
        }

        const world_data = await d3.json("countries-110m.json");
        console.log('world data')
        console.log(world_data)

        salmonCountries = ["Norway", "Sweden", "Denmark", "UK", "Chile"]
        shrimpCountries = ['India', 'China', 'Vietnam', 'Indonesia', 'Thailand']
        tilapiaCountries = ['China', 'Indonesia', 'Honduras', 'Mexico', 'Taiwan'];


        const topColorScale = d3.scaleOrdinal(d3.schemeSet3).domain([1, 2, 3, 4, 5]); var countries = topojson.feature(world_data, world_data.objects.countries);

        var countriesMesh = topojson.mesh(world_data, world_data.objects.countries);

        var projection = d3.geoRobinson().fitSize([mapWidth, mapHeight], countries);
        var path = d3.geoPath().projection(projection);

        function countryColor(country) {
            // Need to fix this later
            // if (selectedFish === 'Salmon'){ranking = salmonCountries.indexOf(country)}
            // else if (selectedFish === 'Shrimp'){ranking = shrimpCountries.indexOf(country)}
            // else if (selectedFish === 'Tilapia'){ranking = tilapiaCountries.indexOf(country)}

            ranking = tilapiaCountries.indexOf(country)

            if (ranking > -1) {
                console.log('country')
                console.log(country)
                return topColorScale(ranking)
            }


        }

        let viewport = map.append("g");

        viewport.selectAll(".countries").data(countries.features)
            .join("path")
            .attr("class", "countries")
            .attr('stroke', 'None')
            .attr('fill', d => countryColor(d.properties.name))
            .attr("d", path);

        viewport.append("path")
            .datum(countriesMesh)
            .attr("class", "country-outline")
            .attr("d", path);

        // Making line graphs comparing traditional fishing production vs fish farms production
        // Resource for line graph and area animation: https://hackernoon.com/animating-line-charts-with-d3js
        const timeParser = d3.timeParse('%Y');
        compareFishing.forEach(d => {
            d['Year'] = timeParser(d["Year"]);
            d['Aquaculture production (metric tons)'] = Number(d['Aquaculture production (metric tons)']);
            d['Capture fisheries production (metric tons)'] = Number(d['Capture fisheries production (metric tons)']);
        })

        const selectedFish = "Tilapia"
        //have to implement selectedFish. For now, just use Norway - Salmon as an example.
        if (selectedFish === 'Salmon') {
            // Graph for Norway - Salmon
            norway = compareFishing.filter(d => d.Entity === 'Norway')
            norway = norway.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
            norway = norway.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

            captureExtent = d3.extent(norway, d => d['Capture fisheries production (metric tons)']);
            aquaExtent = d3.extent(norway, d => d['Aquaculture production (metric tons)'])
            combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];
            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);

            dateExtent = d3.extent(norway, d => d['Year']);
            dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

            capture_subset = norway.map(row => ({
                "Year": row.Year,
                "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
            }));

            aqua_subset = norway.map(row => ({
                "Year": row.Year,
                "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
            }));

            dataset = norway;
        }
        else if (selectedFish === 'Shrimp') {
            // Graph for India - Shrimp
            india = compareFishing.filter(d => d.Entity === 'India')
            india = india.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
            india = india.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

            captureExtent = d3.extent(india, d => d['Capture fisheries production (metric tons)']);
            aquaExtent = d3.extent(india, d => d['Aquaculture production (metric tons)'])
            combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];
            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);

            dateExtent = d3.extent(india, d => d['Year']);
            dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

            capture_subset = india.map(row => ({
                "Year": row.Year,
                "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
            }));

            aqua_subset = india.map(row => ({
                "Year": row.Year,
                "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
            }));

            dataset = india;

        }
        else if (selectedFish === 'Tilapia') {
            // Graph for China - Tilapia
            china = compareFishing.filter(d => d.Entity === 'China')
            china = china.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
            china = china.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

            captureExtent = d3.extent(china, d => d['Capture fisheries production (metric tons)']);
            aquaExtent = d3.extent(china, d => d['Aquaculture production (metric tons)'])
            combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];
            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);

            dateExtent = d3.extent(china, d => d['Year']);
            dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

            capture_subset = china.map(row => ({
                "Year": row.Year,
                "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
            }));

            aqua_subset = china.map(row => ({
                "Year": row.Year,
                "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
            }));


            dataset = china;

        }

        let graph_leftAxis = d3.axisLeft(combinedScale)
        let graph_leftGridlines = d3.axisLeft(combinedScale)
            .tickSize(-graphWidth - 10)
            .tickFormat("")
        graph_annotations.append("g")
            .attr("class", "y-axis")
            .attr("transform", `translate(${graph_margin.left - 10},${graph_margin.top})`)
            .call(graph_leftAxis)

        let graph_bottomAxis = d3.axisBottom(dateScale)
        let graph_bottomGridlines = d3.axisBottom(dateScale)
            .tickSize(-graphHeight - 10)
            .tickFormat("")
        graph_annotations.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(${graph_margin.left},${graphHeight + graph_margin.top + 10})`)
            .call(graph_bottomAxis);


        //Making the line generators
        var capturelineGen = d3.line()
            .x(d => dateScale(d['Year']))
            .y(d => combinedScale((d['Capture fisheries production (metric tons)'])))
            .curve(d3.curveMonotoneX);

        var aqualineGen = d3.line()
            .x(d => dateScale(d['Year']))
            .y(d => combinedScale((d['Aquaculture production (metric tons)'])))
            .curve(d3.curveMonotoneX);


        // Making area transitions

        const capture_area = d3.area()
            .x(function (d) { return dateScale(d.Year); })
            .y0(graphHeight)
            .y1(function (d) { return combinedScale(d['Capture fisheries production (metric tons)']); })
            .curve(d3.curveCatmullRom.alpha(0.5));


        const aqua_area = d3.area()
            .x(function (d) { return dateScale(d.Year); })
            .y0(graphHeight)
            .y1(function (d) { return combinedScale(d['Aquaculture production (metric tons)']); })
            .curve(d3.curveCatmullRom.alpha(0.5));

        // Making area transitions
        const zeroArea = d3.area()
            .x(function (d) { return dateScale(d.Year); })
            .y0(graphHeight)
            .y1(function () { return 0; })
            .curve(d3.curveCatmullRom.alpha(0.5));


        graph.append("path")
            .attr("d", function (d) {
                return zeroArea(dataset) //must pass country dataset
            })
            .style('fill', '#7ba7cc')
            .style("opacity",0.5)
            .transition()
            .duration(1500)
            .attr("d", function (d) {
                return capture_area(dataset) //must pass country dataset
            })
            .style('fill', '#7ba7cc')
            .style("opacity",0.5)


        graph.append("path")
            .attr("d", function (d) {
                return zeroArea(dataset) //must pass country dataset
            })
            .style('fill', '#FAD5A5')
            .style("opacity",0.5)
            .transition()
            .duration(1500)
            .attr("d", function (d) {
                return aqua_area(dataset) //must pass country dataset
            })
            .style('fill', '#FAD5A5')
            .style("opacity",0.5)

        // Making the lines
        const capture_path = graph.append("path")
            .datum(capture_subset)
            .attr("class", "line")
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 3)
            .attr("d", capturelineGen);

        const aqua_path = graph.append("path")
            .datum(aqua_subset)
            .attr("class", "line")
            .attr("fill", "none")
            .attr("stroke", "orange")
            .attr("stroke-width", 3)
            .attr("d", aqualineGen);

        // Making line transitions
        const capture_length = capture_path.node().getTotalLength(); 

        capture_path.attr("stroke-dasharray", capture_length + " " + capture_length)
            .attr("stroke-dashoffset", capture_length)
            .transition()
            .ease(d3.easeLinear)
            .attr("stroke-dashoffset", 0)
            .delay(1500)
            .duration(3000)

        const aqua_length = aqua_path.node().getTotalLength(); 

        aqua_path.attr("stroke-dasharray", aqua_length + " " + aqua_length)
            .attr("stroke-dashoffset", aqua_length)
            .transition()
            .ease(d3.easeLinear)
            .attr("stroke-dashoffset", 0)
            .delay(1500)
            .duration(3000)




    }


    getData();
</script>

</html>