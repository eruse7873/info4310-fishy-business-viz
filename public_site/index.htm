<html>

<head>
    <link rel="stylesheet" href="estellestyles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/scrollama"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>
    <script src="scroll.js"></script>
    <title>Fishy Business</title>
</head>

<body>

    <section id="scrollViz">
        <div id="graphic">
            <div id="vis">
                <!-- <div class="alignVertical"> -->
                <div class="menu fancyFont alignVertical">
                    <h2>Catch of the Day</h2>
                    <!-- Salmon Order -->
                    <div class="order alignVertical">
                        <text id=salmon class="menuTitle hover-underline-animation fadeAnimation">Miso
                            Salmon | $31</text>
                        <p>Served with bok choy, ginger rice, and microgreens.</p>
                    </div>
                    <!-- Shrimp Order -->
                    <div class="order alignVertical">
                        <text id=shrimp class="menuTitle hover-underline-animation fadeAnimation">Spicy
                            Cajun Shrimp | $27</text>
                        <p>Served with cheesy grits and a big spoon.</p>

                    </div>
                    <!-- Tilapia Order -->
                    <div class="order alignVertical">
                        <text id=tilapia class="menuTitle hover-underline-animation fadeAnimation">Fried
                            Tilapia Sandwich | $23</text>
                        <p>Served with coleslaw, pickles, tartar sauce, and a side of fries.</p>
                    </div>
                    <!-- </div> -->
                </div>
                

                <div class="receipt fancyFont hiddenRemove">
                    <h2 class="textCenter">Fishy Business</h2>
                    <h3 class="textCenter">fishy-business.onrender.com</h3>
                    <hr class="dashed-line">
                    <table>
                        <col width="70%">
                        <col width="20%">
                        <tr>
                            <th id="dishName"></th>
                            <th id="dishPrice"></th>
                        </tr>
                        <tr>
                            <th id="water"></th>
                            <th id="waterPrice"></th>
                        </tr>
                        <tr>
                            <th id="land"></th>
                            <th id="landPrice"></th>
                        </tr>
                        <tr>
                            <th id="nitrogen"></th>
                            <th id="nitrogenPrice"></th>
                        </tr>
                        <tr>
                            <th id="phos"></th>
                            <th id="phosPrice"></th>
                        </tr>
                    </table>
                    <hr class="dashed-line">
                </div>

                <div class="map hidden">
                    <svg id="choropleth" height="600" width="800"
                        style="background: white; border: 2px solid gray"></svg>
                </div>


                <div class="lineGraph hidden">
                    <svg id="graph" height="600" width="800"
                        style="background: white; margin-top:50px; border: 2px solid gray"></svg>
                </div>
            </div>

            <div id="sections">

                <section id="menu" class="step">
                    <div>
                        <header id=heading class="fancyFont">
                            <h1>Fishy Business</h1>
                            <h2>The cost of your filet from fish to sea</h2>
                        </header>
                        <h3 id="author">By Estelle Hooper, Eva Ruse, Gabriella Chu</h3>
                        <p>Welcome to our restaurant. I'm your server, Fishy Business.</p>
                        <p>Please order any of our specials!</p>
                        <div id='scrollInfo' class="invisible">
                            <h4 id="scrollText" class="textCenter bounce">Scroll to continue</h4>
                            <div class="scroll-down"></div>
                        </div>

                    </div>
                </section>

                <div id="hiddenSections" class="hidden">

                    <section id="text1" class="step" height="100vh">
                        <p>We hope you enjoyed your meal!</p>
                        <p>However, it looks like there are some extra costs...</p>
                    </section>

                    <section id="text2" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text3" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text4" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text5" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text6" class="step" height="100vh">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
                            voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
                            cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </section>

                    <section id="text7" class="step" height="100vh">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in
                            voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
                            cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </section>

                </div>


            </div>
            <div id="chartContainer">
                <svg id="bar1" height="500" width="600"></svg>
            </div>
            <div id="infoGraphicContainer">
                <p>for 1 kg of salmon, 0.16 m<sup>2</sup> of freshwater is consumed, which is about 42 gallons.</p>
                <!-- append infographic images here -->
                <img src="images/gallons.png" width="300"> </img>
            </div>

        </div>
    </section>
</body>

<script>
    // d3.selectAll(".menuTitle").
    const map_svg = d3.select("#choropleth");
    const map_width = map_svg.attr("width");
    const map_height = map_svg.attr("height");
    const map_margin = { top: 5, right: 5, bottom: 5, left: 5 };
    const mapWidth = map_width - map_margin.left - map_margin.right;
    const mapHeight = map_height - map_margin.top - map_margin.bottom;
    const map = map_svg.append("g")
        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")");

    const graph_svg = d3.select("#graph");
    const graph_width = graph_svg.attr("width");
    const graph_height = graph_svg.attr("height");
    const graph_margin = { top: 20, right: 20, bottom: 50, left: 90 };
    const graphWidth = graph_width - graph_margin.left - graph_margin.right;
    const graphHeight = graph_height - graph_margin.top - graph_margin.bottom;
    const graph = graph_svg.append("g")
        .attr("transform", "translate(" + graph_margin.left + "," + graph_margin.top + ")");

    let graph_annotations = graph_svg.append("g").attr("id", "annotations");

    const chart1 = d3.select("#bar1");
    const width1 = chart1.attr("width");
    const height1 = chart1.attr("height");
    const margin1 = { top: 35, right: 10, bottom: 45, left: 150 };
    const chartWidth1 = width1 - margin1.left - margin1.right;
    const chartHeight1 = height1 - margin1.top - margin1.bottom;
    let annotations1 = chart1.append("g").attr("id", "annotations");
    const chartArea1 = chart1.append("g").attr("transform", "translate(" + margin1.left + "," + margin1.top + ")");

    const getData = async function () {

        // bar chart data
        let water_use = await d3.csv("data/water-use.csv", d3.autotype);
        let land_use = await d3.csv("data/land-use.csv", d3.autotype);
        let nitrogen_emissions = await d3.csv("data/nitrogen-use.csv", d3.autotype);
        let phos_emissions = await d3.csv("data/phos-use.csv", d3.autotype);


        // map data
        const world_data = await d3.json("countries-110m.json");
        const centroid_data = await d3.csv("data/centroids.csv", d3.autotype)


        // line graph data
        let compareFishing = await d3.csv("data/capture-fisheries-vs-aquaculture.csv", d3.autotype);


        // can either be Salmon, Shrimp, or Tilapia
        salmon_water_use = water_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        tilapia_water_use = water_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        shrimp_water_use = water_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Freshwater use (m3 / kg edible weight)']

        salmon_land_use = land_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Land use (m2 / kg edible weight)']
        tilapia_land_use = land_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Land use (m2 / kg edible weight)']
        shrimp_land_use = land_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Land use (m2 / kg edible weight)']

        salmon_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        tilapia_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        shrimp_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Nitrogen (kgN / t edible weight)']

        salmon_phos_emissions = phos_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        tilapia_phos_emissions = phos_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        shrimp_phos_emissions = phos_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Phosphorous (kgP / t edible weight)']


        // const chart1 = d3.select("#bar1");
        // const width1 = chart1.attr("width");
        // const height1 = chart1.attr("height");
        // const margin1 = { top: 35, right: 10, bottom: 45, left: 150 };
        // const chartWidth1 = width1 - margin1.left - margin1.right;
        // const chartHeight1 = height1 - margin1.top - margin1.bottom;
        // let annotations1 = chart1.append("g").attr("id", "annotations");
        // const chartArea1 = chart1.append("g").attr("transform", "translate(" + margin1.left + "," + margin1.top + ")");


        initialEstelle = async function () {
            console.log('initialEstelle')

            d3.select("#chartContainer").style('opacity', 0)


            currentDish = d3.selectAll('.currentDish').classed('fadeIn', false);
            await currentDish.transition().style('opacity', 0).end();

            // currentDish.remove();
            addReceipt = true;

            menu = d3.select(".menu")
            menu.classed("hidden", false);
            menu.transition().style('opacity', 1).style('transform', "translateX(0px)")

            receipt = d3.select(".receipt")
            // receipt.selectAll(".receiptText").remove();

            receipt.classed("hiddenRemove", true);
            // receipt.transition().style('opacity', 1).style('transform', "translateX(0px)")


        }

        estelle1 = async function () {
            console.log('estelle1')

            await menu.transition().style('opacity', 0).style('transform', "translateX(-200px)").end()
            await d3.select("#infoGraphicContainer").transition().style('opacity', 0).end()

            receipt = d3.select(".receipt")
            receipt.transition().duration(200).style('transform','translateX(0px)');
            receipt.classed('hiddenRemove',false).classed('fadeIn',true)
            

            d3.select("#chartContainer").style('opacity', 0)

            menu = d3.select(".menu")
            console.log(menu);


            receipt = d3.select('.receipt')
            // receipt.selectAll(".receiptText").remove();
            // receipt.selectAll(".dashed-line").remove();
            console.log(selectedFish)

            if (addReceipt == true) {
                d3.select("#infoGraphicContainer").style("opacity", 0);

                menu.classed('hidden', true);
                menu.attr("height", 0)
                //add our receipt stuff

                receipt.classed('hidden', false);


                if (selectedFish === 'salmon') {
                    dish = "Miso Salmon"
                    price = "$31.00"
                }
                else if (selectedFish === 'shrimp') {
                    dish = "Spicy Cajun Shrimp"
                    price = "$27.00"
                }
                else if (selectedFish === 'tilapia') {
                    dish = "Fried Tilapia Sandwich"
                    price = "$23.00"
                }


                receipt.select("#dishName").text(dish).classed('fadeIn', true)
                receipt.select("#dishPrice").text(price).classed('fadeIn', true)


                // addDish.append('img').attr('src', "images/" + selectedFish + ".jpg").attr('class', 'currentDish').classed('fadeIn', true);
                console.log('executed')
                addReceipt = false

                // we hard coded text opacity here but idk 
                d3.select("#text1").transition().style('opacity', 1);
                // d3.select("#text2").transition().style('opacity', 0);



            }
            // receiptText = d3.select('.receiptText').classed('fadeIn', false);


        }

        addWater = async function () {
            console.log('addWater');
            receipt = d3.select(".receipt")

            // move receipt to make room for the infographic
            await receipt.transition().duration(200).style('transform','translateX(-275px)').end();

            // receiptText = d3.select('.receiptText').style('transform', "translateX(0px)");
            // receiptText.transition().style('opacity', 0).style('transform', "translateX(-200px)");

            // d3.select('.receipt').classed('hidden',false);
            // we hard coded text opacity here but idk 

            receipt.select("#dishName").text(dish).classed('fadeIn', true)
            receipt.select("#dishPrice").text(price).classed('fadeIn', true)

            receipt.select("#water").text('Water').classed('fadeIn', true)
            receipt.select("#waterPrice").text(fish_water_use).classed('fadeIn', true)


            await d3.select("#chartContainer").transition().style('opacity', 1).end()
            await d3.select("#infoGraphicContainer").transition().style('opacity', 1).end()


            // drawChart(water_use, barScale1, leftAxisScale1,'Freshwater use (m3 / kg edible weight)');

            chartArea1.selectAll('rect.bar').data(water_use)
                .join('rect')
                .attr('class', 'bar')
                .attr("fill", d => highlightBar(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr('x', d => barScale1(0))
                .attr('y', d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr("height", leftAxisScale1.bandwidth())
                .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))

        }

        addLand = function () {
            console.log('addLand')

            drawChart(land_use, barScale2, leftAxisScale1, 'Land use (m2 / kg edible weight)')

            receipt = d3.select(".receipt")

            receipt.select("#water").text('Water').classed('fadeIn', true)
            receipt.select("#waterPrice").text(fish_water_use).classed('fadeIn', true)

            receipt.select("#land").text('Land').classed('fadeIn', true)
            receipt.select("#landPrice").text(fish_land_use).classed('fadeIn', true)

        }

        addNitrogen = function () {
            console.log('addNitrogen')

            drawChart(nitrogen_emissions, barScale3, leftAxisScale1, 'Nitrogen (kgN / t edible weight)')

            receipt = d3.select(".receipt")

            receipt.select("#land").text('Land').classed('fadeIn', true)
            receipt.select("#landPrice").text(fish_land_use).classed('fadeIn', true)

            receipt.select("#nitrogen").text('Nitrogen').classed('fadeIn', true)
            receipt.select("#nitrogenPrice").text(fish_nitrogen_emissions).classed('fadeIn', true)


        }

        addPhos = function () {
            console.log('addPhos')

            drawChart(phos_emissions, barScale4, leftAxisScale1, 'Phosphorous (kgP / t edible weight)')

            receipt = d3.select(".receipt")

            receipt.select("#nitrogen").text('Nitrogen').classed('fadeIn', true)
            receipt.select("#nitrogenPrice").text(fish_nitrogen_emissions).classed('fadeIn', true)

            receipt.select("#phos").text('Phosphorous').classed('fadeIn', true)
            receipt.select("#phosPrice").text(fish_phos_emissions).classed('fadeIn', true)

            // receipt.classed('hidden', false);
            d3.select(".map").classed('hidden', true);
            d3.select("#chartContainer").style("opacity", 1);
            d3.select("#infoGraphicContainer").style("opacity", 1);

        }

        addMap = function () {
            // make receipt invisible
            d3.select("#infoGraphicContainer").style("opacity", 0);

            receipt = d3.select(".receipt")
            receipt.classed('fadeIn', false);
            receipt.classed('hiddenRemove', true);
            receipt.attr("height", 0)

            // make bar chart invisible
            d3.select("#chartContainer").transition().style('opacity', 0)
            // make infographic invisible
            d3.select("#infoGraphicContainer").transition().style('opacity', 0)


            // make map visible

            d3.select(".map").classed('hidden', false);



            //if scrolling backwards
            d3.select(".lineGraph").classed('hidden', true);



        }

        addLineGraph = function () {

            // make map invisible
            d3.select(".map").classed('hidden', true);

            // make line graph visible
            d3.select(".lineGraph").classed('hidden', false);



            // trying to wait to call line graph
            let graph_leftGridlines = d3.axisLeft(combinedScale)
                .tickSize(-graphWidth - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "y-axis")
                .attr("transform", `translate(${graph_margin.left - 10},${graph_margin.top})`)
                .call(graph_leftAxis)

            let graph_bottomAxis = d3.axisBottom(dateScale)
            let graph_bottomGridlines = d3.axisBottom(dateScale)
                .tickSize(-graphHeight - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${graph_margin.left},${graphHeight + graph_margin.top + 10})`)
                .call(graph_bottomAxis);


            //Making the line generators
            var capturelineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Capture fisheries production (metric tons)'])))
                .curve(d3.curveMonotoneX);

            var aqualineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Aquaculture production (metric tons)'])))
                .curve(d3.curveMonotoneX);


            // Making area transitions

            const capture_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Capture fisheries production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));


            const aqua_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Aquaculture production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));

            // Making area transitions
            const zeroArea = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function () { return 0; })
                .curve(d3.curveCatmullRom.alpha(0.5));


            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#7ba7cc')
                .style("opacity", 0.5)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return capture_area(dataset) //must pass country dataset
                })
                .style('fill', '#7ba7cc')
                .style("opacity", 0.5)


            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#FAD5A5')
                .style("opacity", 0.5)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return aqua_area(dataset) //must pass country dataset
                })
                .style('fill', '#FAD5A5')
                .style("opacity", 0.5)

            // Making the lines
            const capture_path = graph.append("path")
                .datum(capture_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "#2942a5")
                .attr("stroke-width", 2)
                .attr("d", capturelineGen);

            const aqua_path = graph.append("path")
                .datum(aqua_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "rgb(235, 72, 3)")
                .attr("stroke-width", 2)
                .attr("d", aqualineGen);

            // Making line transitions
            const capture_length = capture_path.node().getTotalLength();

            capture_path.attr("stroke-dasharray", capture_length + " " + capture_length)
                .attr("stroke-dashoffset", capture_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)

            const aqua_length = aqua_path.node().getTotalLength();

            aqua_path.attr("stroke-dasharray", aqua_length + " " + aqua_length)
                .attr("stroke-dashoffset", aqua_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)


        }

        // waterbar = async function () 

        function createScales() {
            // Setting up scales and axes for the 4 bar charts (do we need 4 separate bar charts or should we update the same one?)

            //removing "(farmed)" from each of the fish entities
            species = water_use.map(d => d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1))

            //making scales and axes for water
            water_values = water_use.map(d => Number(d['Freshwater use (m3 / kg edible weight)']))
            land_values = land_use.map(d => Number(d['Land use (m2 / kg edible weight)']))
            nitrogen_values = nitrogen_emissions.map(d => Number(d['Nitrogen (kgN / t edible weight)']))
            phos_values = phos_emissions.map(d => Number(d['Phosphorous (kgP / t edible weight)']))

            leftAxisScale1 = d3.scaleBand().domain(species).range([chartHeight1, 0]).padding(0.05);

            barvalueExtent1 = d3.extent(water_values)
            barScale1 = d3.scaleLinear().domain([0, barvalueExtent1[1]]).range([0, chartWidth1]);
            console.log('barscale1')
            console.log(barScale1)

            let leftAxis1 = d3.axisLeft();
            let leftAxisG1 = annotations1.append("g")
                .attr("class", "y-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1}, ${margin1.top})`);
            leftAxis1.scale(leftAxisScale1);
            leftAxisG1.transition().call(leftAxis1);

            let bottomAxis1 = d3.axisBottom();
            let bottomAxisG1 = annotations1.append("g")
                .attr("class", "x-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            bottomAxis1.scale(barScale1);
            bottomAxisG1.transition().call(bottomAxis1);

            //making scales and axes for land
            barvalueExtent2 = d3.extent(land_values)
            barScale2 = d3.scaleLinear().domain([0, barvalueExtent2[1]]).range([0, chartWidth1]);

            //making scales and axes for nitrogen
            barvalueExtent3 = d3.extent(nitrogen_values)
            barScale3 = d3.scaleLinear().domain([0, barvalueExtent3[1]]).range([0, chartWidth1]);

            //making scales for phos
            barvalueExtent4 = d3.extent(phos_values)
            barScale4 = d3.scaleLinear().domain([0, barvalueExtent4[1]]).range([0, chartWidth1]);
        }

        createScales();

        d3.selectAll(".menuTitle")
            .on('click', orderUp)


        // global variable for fish selection: salmon, shrimp, tilapia
        var selectedFish = null

        // global boolean to track if the receipt should be added
        var addReceipt = false

        // global variable for scales
        var combinedScale = 0
        var graph_leftAxis = 0

        function orderUp() {

            initialEstelle();

            scroll()
            console.log('scroll happened')

            addReceipt = true;



            // d3.selectAll('p').classed('hidden', false)

            menu = d3.select(".menu")
            orders = d3.selectAll(".order")
            menuTitles = d3.selectAll('.menuTitle')

            // the ones the user didn't select, make beige
            menuTitles.classed('orderNotSelected', true)
            orders.classed('orderNotSelected', true)
            d3.select(this).classed('orderNotSelected', false)
            d3.select(this.parentNode).classed('orderNotSelected', false)

            // cannot click another selection
            menu.style("pointer-events", "none")

            // turn off fading text
            menuSection = d3.select('section#menu')
            menuSection.selectAll(".fadeInOut").classed("fadeInOut", false)

            // make arrow visible
            d3.select('#scrollInfo').classed('invisible', false).classed('fadeIn', true);

            console.log('orderup')

            selectedFish = this.id;

            // d3.select('.menu').style('display', 'none')
            // d3.select('#menuContainer').style('display', 'none')

            if (selectedFish === 'salmon') {
                fish_water_use = salmon_water_use
                fish_land_use = salmon_land_use
                fish_nitrogen_emissions = salmon_nitrogen_emissions
                fish_phos_emissions = salmon_phos_emissions
            }
            else if (selectedFish === 'shrimp') {
                fish_water_use = shrimp_water_use
                fish_land_use = shrimp_land_use
                fish_nitrogen_emissions = shrimp_nitrogen_emissions
                fish_phos_emissions = shrimp_phos_emissions
            }
            else if (selectedFish === 'tilapia') {
                fish_water_use = tilapia_water_use
                fish_land_use = tilapia_land_use
                fish_nitrogen_emissions = tilapia_nitrogen_emissions
                fish_phos_emissions = tilapia_phos_emissions
            }

            // reveal next section
            dishSection = d3.select('#hiddenSections').classed('hidden', false);




            // start of map code

            salmonCountries = ["Norway", "Sweden", "Denmark", "United Kingdom", "Chile"]
            shrimpCountries = ['India', 'China', 'Vietnam', 'Indonesia', 'Thailand']
            tilapiaCountries = ['China', 'Indonesia', 'Honduras', 'Mexico', "Taiwan"];


            const colors = ["#052132", "#00375E", "#005D8F", "#0978AF", "#1A93CF"];
            const topColorScale = d3.scaleOrdinal(colors).domain([0, 1, 2, 3, 4]);

            var countries = topojson.feature(world_data, world_data.objects.countries);
            var countriesMesh = topojson.mesh(world_data, world_data.objects.countries);

            var projection = d3.geoRobinson().fitSize([mapWidth, mapHeight], countries);
            var path = d3.geoPath().projection(projection);

            // coloring function for different fish selections
            function countryColor(country) {
                if (selectedFish === 'salmon') { ranking = salmonCountries.indexOf(country) }
                else if (selectedFish === 'shrimp') { ranking = shrimpCountries.indexOf(country) }
                else if (selectedFish === 'tilapia') { ranking = tilapiaCountries.indexOf(country) }

                console.log("fish")
                console.log(selectedFish);

                if (ranking > -1) {
                    return topColorScale(ranking)
                }
                else {
                    return "#f4f1e4"
                }


            }


            // making the map paths
            let viewport = map.append("g");

            viewport.selectAll(".countries").data(countries.features)
                .join("path")
                .attr("class", "countries")
                // .attr('stroke', 'darkgray')
                .attr('fill', d => countryColor(d.properties.name))
                .attr("d", path);

            viewport.append("path")
                .datum(countriesMesh)
                .attr("class", "country-outline")
                .attr("d", path);


            // making the legend
            // reference: https://stackoverflow.com/questions/41090920/how-to-position-the-legend-in-a-d3-chart
            var legendText = ["#1 Exporter", "#2 Exporter", "#3 Exporter", "#4 Exporter", "#5 Exporter"];

            var legend = map.selectAll(".legend")
                .data(colors)
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });


            legend.append("rect").data(colors)
                .attr("x", 20)
                .attr("y", 450)
                .attr("width", 20)
                .attr("height", 20)
                .attr("fill", d => d)

            legend.append("text").data(legendText)
                .attr("x", 45)
                .attr("y", 465)
                .text(d => d)
                .style("font-size", "12px")



            // making the country marks

            if (selectedFish === "salmon") { selectedCountries = salmonCountries }
            else if (selectedFish === "shrimp") { selectedCountries = shrimpCountries }
            else if (selectedFish === "tilapia") { selectedCountries = tilapiaCountries }

            selectedCountries.forEach((d) => {
                //d is the country name
                console.log(d)
                selectedCountry = centroid_data.filter(i => i['COUNTRY'] === d);
                // selectedCoun = countries.features.filter(i => i.properties['name'] === d);

                console.log(selectedCountry)


                let markPos = projection([selectedCountry[0]['longitude'], selectedCountry[0]['latitude']]);
                console.log(markPos)

                let pinCountry = selectedCountry[0]["COUNTRY"];
                console.log(pinCountry);


                let textbox = map.append("g")
                    .attr("class", "tooltip")
                    .attr("visibility", "hidden");

                textbox.append("rect")
                    .attr("opacity", 0.9)
                    .attr("fill", "lightgray")
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("height", 25)
                    .attr("width", function () { return pinCountry.length * 10 })
                    .attr("alignment-baseline", "hanging")
                    .attr("rx", 8)

                textbox.append("text")
                    .text(pinCountry)
                    .attr("x", 2)
                    .attr("y", 5)
                    .attr("text-anchor", "right")
                    .attr("alignment-baseline", "hanging")

                textbox.attr("transform", `translate(${markPos[0] + 2},${markPos[1] + 3})`);

                map.append("image")
                    .attr('class', 'mark')
                    .attr("xlink:href", "images/mappin.png")
                    .attr("x", markPos[0] - 11)
                    .attr("y", markPos[1] - 14)
                    .attr("width", 20)
                    .attr("height", 20)
                    .on("mouseover", function () { textbox.style("visibility", "visible") })
                    .on("mouseout", function () { textbox.style("visibility", "hidden") })

            })

            // Making line graphs comparing traditional fishing production vs fish farms production
            // Resource for line graph and area animation: https://hackernoon.com/animating-line-charts-with-d3js
            const timeParser = d3.timeParse('%Y');
            compareFishing.forEach(d => {
                d['Year'] = timeParser(d["Year"]);
                d['Aquaculture production (metric tons)'] = Number(d['Aquaculture production (metric tons)']);
                d['Capture fisheries production (metric tons)'] = Number(d['Capture fisheries production (metric tons)']);
            })

            console.log('selectedFish', selectedFish)

            //have to implement selectedFish. For now, just use Norway - Salmon as an example.
            if (selectedFish === 'salmon') {
                // Graph for Norway - Salmon
                norway = compareFishing.filter(d => d.Entity === 'Norway')
                norway = norway.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
                norway = norway.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

                captureExtent = d3.extent(norway, d => d['Capture fisheries production (metric tons)']);
                aquaExtent = d3.extent(norway, d => d['Aquaculture production (metric tons)'])

                dateExtent = d3.extent(norway, d => d['Year']);
                dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

                capture_subset = norway.map(row => ({
                    "Year": row.Year,
                    "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
                }));

                aqua_subset = norway.map(row => ({
                    "Year": row.Year,
                    "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
                }));

                dataset = norway;
            }
            else if (selectedFish === 'shrimp') {
                // Graph for India - Shrimp
                india = compareFishing.filter(d => d.Entity === 'India')
                india = india.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
                india = india.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

                captureExtent = d3.extent(india, d => d['Capture fisheries production (metric tons)']);
                aquaExtent = d3.extent(india, d => d['Aquaculture production (metric tons)'])

                dateExtent = d3.extent(india, d => d['Year']);
                dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

                capture_subset = india.map(row => ({
                    "Year": row.Year,
                    "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
                }));

                aqua_subset = india.map(row => ({
                    "Year": row.Year,
                    "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
                }));

                dataset = india;

            }
            else if (selectedFish === 'tilapia') {
                // Graph for China - Tilapia
                china = compareFishing.filter(d => d.Entity === 'China')
                china = china.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
                china = china.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

                captureExtent = d3.extent(china, d => d['Capture fisheries production (metric tons)']);
                aquaExtent = d3.extent(china, d => d['Aquaculture production (metric tons)'])

                dateExtent = d3.extent(china, d => d['Year']);
                dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

                capture_subset = china.map(row => ({
                    "Year": row.Year,
                    "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
                }));

                aqua_subset = china.map(row => ({
                    "Year": row.Year,
                    "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
                }));


                dataset = china;

            }
            let combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];

            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);
            graph_leftAxis = d3.axisLeft(combinedScale)


        }


        function highlightBar(v) {
            console.log('highlightBar')
            console.log('v', v)
            console.log('selectedFish', selectedFish)
            v = v.toLowerCase();
            if (v === selectedFish) {
                return 'rgb(235, 72, 3)';
            }
            else { return 'gray' }
        }


        function drawChart(data, barscale, leftaxisscale, column) {
            console.log('drawChart')

            chartArea1.selectAll('rect.bar').data(data)
                .join(enter => enter.append('rect')
                    .attr('class', 'bar')
                    .attr("x", d => barscale(0))
                    .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("height", leftaxisscale.bandwidth())
                    .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))
                    .attr("opacity", 0)
                    .call(enter => enter.transition()
                        .attr('opacity', 1)),
                    update => update.call(update => update.transition()
                        .attr("fill", d => highlightBar(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))

                        .attr("x", d => barscale(0))
                        .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("height", leftaxisscale.bandwidth())
                        .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))),
                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));
        }

        // source: https://towardsdatascience.com/how-i-created-an-interactive-scrolling-visualisation-with-d3-js-and-how-you-can-too-e116372e2c73

        let scroll = scroller().container(d3.select('#graphic'))

        let lastIndex, activeIndex = 0
        //This is where most of the magic happens. Every time the user scrolls, we receive a new index. First, we find all the irrelevant sections, and reduce their opacity. 
        scroll.on('active', function (index) {
            d3.selectAll('.step')
                .transition().duration(500)
                .style('opacity', function (d, i) { return i === index ? 1 : 0.1; });
            //Next, we selection from a range of activationFunctions (which we create), based on the index of the current section. 
            activeIndex = index
            console.log('active index')
            console.log(activeIndex);
            let sign = (activeIndex - lastIndex) < 0 ? -1 : 1;
            let scrolledSections = d3.range(lastIndex + sign, activeIndex + sign, sign);
            console.log('scrolledSections')
            console.log(scrolledSections)
            scrolledSections.forEach(i => {
                console.log('i')
                console.log(i)
                activationFunctions[i]();
            })
            lastIndex = activeIndex;
        })
        scroll.on('progress', function (index, progress) {
            if (index == 2 & progress > 0.7) { }
        })

        let activationFunctions = [initialEstelle, estelle1, addWater, addLand, addNitrogen, addPhos, addMap, addLineGraph]

    }

    getData();
</script>

</html>